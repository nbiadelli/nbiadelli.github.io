{"version":3,"sources":["context/TaskListContext.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["TaskListContext","createContext","TaskListContextProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","editItem","setEditItem","useEffect","setItem","stringify","Provider","value","addTask","title","id","uuid","done","removeTask","filter","task","cleartList","e","preventDefault","findItem","item","find","console","log","editTask","newTasks","map","toggleTask","persist","tsk","f","target","tasksUndone","x","tasksDone","children","Task","useContext","className","data-testid","onClick","type","defaultChecked","TaskList","length","key","TaskForm","setTitle","onSubmit","onChange","placeholder","required","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94ce7d99.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport uuid from \"uuid\";\n\nexport const TaskListContext = createContext();\nconst TaskListContextProvider = props => {\n  const initialState = JSON.parse(localStorage.getItem(\"tasks\")) || [];\n\n  const [tasks, setTasks] = useState(initialState);\n\n  const [editItem, setEditItem] = useState(null);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const addTask = title => {\n    setTasks([...tasks, { title, id: uuid(), done: false }]);\n  };\n\n  const removeTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTask = e => {\n    e.persist();\n    const tsk = tasks.find(f => f.id === e.target.id);\n    tsk.done = !tsk.done;\n    const tasksUndone = tasks.filter(x => !x.done);\n    const tasksDone = tasks.filter(x => x.done);\n    setTasks([...tasksUndone, ...tasksDone]);\n  };\n\n  const cleartList = e => {\n    e.preventDefault();\n    setTasks([]);\n  };\n\n  const findItem = id => {\n    const item = tasks.find(task => task.id === id);\n    console.log(\"oioi\", item);\n    setEditItem(item);\n  };\n\n  const editTask = (title, id) => {\n    const newTasks = tasks.map(task => (task.id === id ? { title, id } : task));\n    setTasks(newTasks);\n    setEditItem(null);\n  };\n\n  return (\n    <TaskListContext.Provider\n      value={{\n        tasks,\n        addTask,\n        removeTask,\n        cleartList,\n        findItem,\n        editTask,\n        editItem,\n        toggleTask,\n      }}>\n      {props.children}\n    </TaskListContext.Provider>\n  );\n};\n\nexport default TaskListContextProvider;\n","import React, { useContext } from \"react\";\nimport { TaskListContext } from \"../context/TaskListContext\";\n\nconst Task = ({ task }) => {\n  const { removeTask, findItem, toggleTask } = useContext(TaskListContext);\n  return (\n    <li className=\"list-item\" data-testid=\"list-task\">\n      <span className={task.done ? \"list-item-done\" : \"\"}>{task.title}</span>\n      <div>\n        <button\n          onClick={() => removeTask(task.id)}\n          className=\"btn-delete task-btn\">\n          <i className=\"fas fa-trash-alt\"></i>\n        </button>\n        <button className=\"btn-edit task-btn\" onClick={() => findItem(task.id)}>\n          <i className=\"fas fa-pen\"></i>\n        </button>\n        <input\n          className=\"toggle-task\"\n          type=\"checkbox\"\n          id={task.id}\n          onClick={toggleTask}\n          defaultChecked={task.done}\n        />\n      </div>\n    </li>\n  );\n};\n\nexport default Task;\n","import React, { useContext } from \"react\";\nimport { TaskListContext } from \"../context/TaskListContext\";\nimport Task from \"./Task\";\n\nconst TaskList = () => {\n  const { tasks } = useContext(TaskListContext);\n  return (\n    <div>\n      {tasks.length ? (\n        <ul className=\"list\">\n          {tasks.map(task => {\n            return <Task task={task} key={task.id} />;\n          })}\n        </ul>\n      ) : (\n        <div className=\"no-tasks\">Nenhuma tarefa</div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskList;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { TaskListContext } from \"../context/TaskListContext\";\n\nconst TaskForm = () => {\n  const { addTask, cleartList, editItem, editTask } = useContext(\n    TaskListContext\n  );\n  const [title, setTitle] = useState(\"\");\n\n  const handleChange = e => {\n    setTitle(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!editItem) {\n      addTask(title);\n      setTitle(\"\");\n    } else {\n      editTask(title, editItem.id);\n    }\n  };\n\n  useEffect(() => {\n    if (editItem) {\n      setTitle(editItem.title);\n    } else {\n      setTitle(\"\");\n    }\n  }, [editItem]);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <input\n          data-testid=\"form-field\"\n          onChange={handleChange}\n          value={title}\n          type=\"text\"\n          className=\"task-input\"\n          placeholder=\"Adicionar tarefas...\"\n          required\n        />\n        <div className=\"buttons\">\n          <button\n            data-testid=\"form-btn\"\n            type=\"submit\"\n            className=\"btn add-task-btn\">\n            {editItem ? \"Editar\" : \"Adicionar\"}\n          </button>\n          <button onClick={cleartList} className=\"btn clear-btn\">\n            Limpar\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\nexport default TaskForm;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <h1>Gerenciador de tarefas</h1>\n    </div>\n  );\n};\nexport default Header;\n","import React from \"react\";\nimport TaskList from \"./TaskList\";\nimport TaskForm from \"./TaskForm\";\nimport Header from \"./Header\";\nimport TaskListContextProvider from \"../context/TaskListContext\";\nimport \"../App.css\";\n\nconst App = () => {\n  return (\n    <TaskListContextProvider>\n      <div className=\"container\">\n        <div className=\"app-wrapper\">\n          <div className=\"main\">\n            <Header />\n            <TaskForm />\n            <TaskList />\n          </div>\n        </div>\n      </div>\n    </TaskListContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}